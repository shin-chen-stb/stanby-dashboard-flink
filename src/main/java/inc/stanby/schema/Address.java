/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package inc.stanby.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Address extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6185155569138290868L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"inc.stanby.schema\",\"fields\":[{\"name\":\"addressLevel\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"cityCodes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"coordinatePoint\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GeoLocation\",\"fields\":[{\"name\":\"latitude\",\"type\":\"float\",\"default\":0},{\"name\":\"longitude\",\"type\":\"float\",\"default\":0}],\"default\":null}],\"default\":null},{\"name\":\"distance\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"prefectureCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"station\",\"type\":[\"null\",\"string\"],\"default\":null}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Address> ENCODER =
      new BinaryMessageEncoder<Address>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Address> DECODER =
      new BinaryMessageDecoder<Address>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Address> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Address> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Address>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Address to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Address from a ByteBuffer. */
  public static Address fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Integer addressLevel;
  @Deprecated public java.util.List<java.lang.CharSequence> cityCodes;
  @Deprecated public inc.stanby.schema.GeoLocation coordinatePoint;
  @Deprecated public java.lang.Integer distance;
  @Deprecated public java.lang.CharSequence prefectureCode;
  @Deprecated public java.lang.CharSequence station;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Address() {}

  /**
   * All-args constructor.
   * @param addressLevel The new value for addressLevel
   * @param cityCodes The new value for cityCodes
   * @param coordinatePoint The new value for coordinatePoint
   * @param distance The new value for distance
   * @param prefectureCode The new value for prefectureCode
   * @param station The new value for station
   */
  public Address(java.lang.Integer addressLevel, java.util.List<java.lang.CharSequence> cityCodes, inc.stanby.schema.GeoLocation coordinatePoint, java.lang.Integer distance, java.lang.CharSequence prefectureCode, java.lang.CharSequence station) {
    this.addressLevel = addressLevel;
    this.cityCodes = cityCodes;
    this.coordinatePoint = coordinatePoint;
    this.distance = distance;
    this.prefectureCode = prefectureCode;
    this.station = station;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return addressLevel;
    case 1: return cityCodes;
    case 2: return coordinatePoint;
    case 3: return distance;
    case 4: return prefectureCode;
    case 5: return station;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: addressLevel = (java.lang.Integer)value$; break;
    case 1: cityCodes = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: coordinatePoint = (inc.stanby.schema.GeoLocation)value$; break;
    case 3: distance = (java.lang.Integer)value$; break;
    case 4: prefectureCode = (java.lang.CharSequence)value$; break;
    case 5: station = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'addressLevel' field.
   * @return The value of the 'addressLevel' field.
   */
  public java.lang.Integer getAddressLevel() {
    return addressLevel;
  }

  /**
   * Sets the value of the 'addressLevel' field.
   * @param value the value to set.
   */
  public void setAddressLevel(java.lang.Integer value) {
    this.addressLevel = value;
  }

  /**
   * Gets the value of the 'cityCodes' field.
   * @return The value of the 'cityCodes' field.
   */
  public java.util.List<java.lang.CharSequence> getCityCodes() {
    return cityCodes;
  }

  /**
   * Sets the value of the 'cityCodes' field.
   * @param value the value to set.
   */
  public void setCityCodes(java.util.List<java.lang.CharSequence> value) {
    this.cityCodes = value;
  }

  /**
   * Gets the value of the 'coordinatePoint' field.
   * @return The value of the 'coordinatePoint' field.
   */
  public inc.stanby.schema.GeoLocation getCoordinatePoint() {
    return coordinatePoint;
  }

  /**
   * Sets the value of the 'coordinatePoint' field.
   * @param value the value to set.
   */
  public void setCoordinatePoint(inc.stanby.schema.GeoLocation value) {
    this.coordinatePoint = value;
  }

  /**
   * Gets the value of the 'distance' field.
   * @return The value of the 'distance' field.
   */
  public java.lang.Integer getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(java.lang.Integer value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'prefectureCode' field.
   * @return The value of the 'prefectureCode' field.
   */
  public java.lang.CharSequence getPrefectureCode() {
    return prefectureCode;
  }

  /**
   * Sets the value of the 'prefectureCode' field.
   * @param value the value to set.
   */
  public void setPrefectureCode(java.lang.CharSequence value) {
    this.prefectureCode = value;
  }

  /**
   * Gets the value of the 'station' field.
   * @return The value of the 'station' field.
   */
  public java.lang.CharSequence getStation() {
    return station;
  }

  /**
   * Sets the value of the 'station' field.
   * @param value the value to set.
   */
  public void setStation(java.lang.CharSequence value) {
    this.station = value;
  }

  /**
   * Creates a new Address RecordBuilder.
   * @return A new Address RecordBuilder
   */
  public static inc.stanby.schema.Address.Builder newBuilder() {
    return new inc.stanby.schema.Address.Builder();
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Address RecordBuilder
   */
  public static inc.stanby.schema.Address.Builder newBuilder(inc.stanby.schema.Address.Builder other) {
    return new inc.stanby.schema.Address.Builder(other);
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Address instance.
   * @param other The existing instance to copy.
   * @return A new Address RecordBuilder
   */
  public static inc.stanby.schema.Address.Builder newBuilder(inc.stanby.schema.Address other) {
    return new inc.stanby.schema.Address.Builder(other);
  }

  /**
   * RecordBuilder for Address instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Address>
    implements org.apache.avro.data.RecordBuilder<Address> {

    private java.lang.Integer addressLevel;
    private java.util.List<java.lang.CharSequence> cityCodes;
    private inc.stanby.schema.GeoLocation coordinatePoint;
    private inc.stanby.schema.GeoLocation.Builder coordinatePointBuilder;
    private java.lang.Integer distance;
    private java.lang.CharSequence prefectureCode;
    private java.lang.CharSequence station;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(inc.stanby.schema.Address.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.addressLevel)) {
        this.addressLevel = data().deepCopy(fields()[0].schema(), other.addressLevel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cityCodes)) {
        this.cityCodes = data().deepCopy(fields()[1].schema(), other.cityCodes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coordinatePoint)) {
        this.coordinatePoint = data().deepCopy(fields()[2].schema(), other.coordinatePoint);
        fieldSetFlags()[2] = true;
      }
      if (other.hasCoordinatePointBuilder()) {
        this.coordinatePointBuilder = inc.stanby.schema.GeoLocation.newBuilder(other.getCoordinatePointBuilder());
      }
      if (isValidValue(fields()[3], other.distance)) {
        this.distance = data().deepCopy(fields()[3].schema(), other.distance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.prefectureCode)) {
        this.prefectureCode = data().deepCopy(fields()[4].schema(), other.prefectureCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.station)) {
        this.station = data().deepCopy(fields()[5].schema(), other.station);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Address instance
     * @param other The existing instance to copy.
     */
    private Builder(inc.stanby.schema.Address other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.addressLevel)) {
        this.addressLevel = data().deepCopy(fields()[0].schema(), other.addressLevel);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cityCodes)) {
        this.cityCodes = data().deepCopy(fields()[1].schema(), other.cityCodes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.coordinatePoint)) {
        this.coordinatePoint = data().deepCopy(fields()[2].schema(), other.coordinatePoint);
        fieldSetFlags()[2] = true;
      }
      this.coordinatePointBuilder = null;
      if (isValidValue(fields()[3], other.distance)) {
        this.distance = data().deepCopy(fields()[3].schema(), other.distance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.prefectureCode)) {
        this.prefectureCode = data().deepCopy(fields()[4].schema(), other.prefectureCode);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.station)) {
        this.station = data().deepCopy(fields()[5].schema(), other.station);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'addressLevel' field.
      * @return The value.
      */
    public java.lang.Integer getAddressLevel() {
      return addressLevel;
    }

    /**
      * Sets the value of the 'addressLevel' field.
      * @param value The value of 'addressLevel'.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder setAddressLevel(java.lang.Integer value) {
      validate(fields()[0], value);
      this.addressLevel = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'addressLevel' field has been set.
      * @return True if the 'addressLevel' field has been set, false otherwise.
      */
    public boolean hasAddressLevel() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'addressLevel' field.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder clearAddressLevel() {
      addressLevel = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cityCodes' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getCityCodes() {
      return cityCodes;
    }

    /**
      * Sets the value of the 'cityCodes' field.
      * @param value The value of 'cityCodes'.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder setCityCodes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.cityCodes = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cityCodes' field has been set.
      * @return True if the 'cityCodes' field has been set, false otherwise.
      */
    public boolean hasCityCodes() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cityCodes' field.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder clearCityCodes() {
      cityCodes = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'coordinatePoint' field.
      * @return The value.
      */
    public inc.stanby.schema.GeoLocation getCoordinatePoint() {
      return coordinatePoint;
    }

    /**
      * Sets the value of the 'coordinatePoint' field.
      * @param value The value of 'coordinatePoint'.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder setCoordinatePoint(inc.stanby.schema.GeoLocation value) {
      validate(fields()[2], value);
      this.coordinatePointBuilder = null;
      this.coordinatePoint = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'coordinatePoint' field has been set.
      * @return True if the 'coordinatePoint' field has been set, false otherwise.
      */
    public boolean hasCoordinatePoint() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'coordinatePoint' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public inc.stanby.schema.GeoLocation.Builder getCoordinatePointBuilder() {
      if (coordinatePointBuilder == null) {
        if (hasCoordinatePoint()) {
          setCoordinatePointBuilder(inc.stanby.schema.GeoLocation.newBuilder(coordinatePoint));
        } else {
          setCoordinatePointBuilder(inc.stanby.schema.GeoLocation.newBuilder());
        }
      }
      return coordinatePointBuilder;
    }

    /**
     * Sets the Builder instance for the 'coordinatePoint' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public inc.stanby.schema.Address.Builder setCoordinatePointBuilder(inc.stanby.schema.GeoLocation.Builder value) {
      clearCoordinatePoint();
      coordinatePointBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coordinatePoint' field has an active Builder instance
     * @return True if the 'coordinatePoint' field has an active Builder instance
     */
    public boolean hasCoordinatePointBuilder() {
      return coordinatePointBuilder != null;
    }

    /**
      * Clears the value of the 'coordinatePoint' field.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder clearCoordinatePoint() {
      coordinatePoint = null;
      coordinatePointBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * @return The value.
      */
    public java.lang.Integer getDistance() {
      return distance;
    }

    /**
      * Sets the value of the 'distance' field.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder setDistance(java.lang.Integer value) {
      validate(fields()[3], value);
      this.distance = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'distance' field.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder clearDistance() {
      distance = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'prefectureCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrefectureCode() {
      return prefectureCode;
    }

    /**
      * Sets the value of the 'prefectureCode' field.
      * @param value The value of 'prefectureCode'.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder setPrefectureCode(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.prefectureCode = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'prefectureCode' field has been set.
      * @return True if the 'prefectureCode' field has been set, false otherwise.
      */
    public boolean hasPrefectureCode() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'prefectureCode' field.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder clearPrefectureCode() {
      prefectureCode = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'station' field.
      * @return The value.
      */
    public java.lang.CharSequence getStation() {
      return station;
    }

    /**
      * Sets the value of the 'station' field.
      * @param value The value of 'station'.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder setStation(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.station = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'station' field has been set.
      * @return True if the 'station' field has been set, false otherwise.
      */
    public boolean hasStation() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'station' field.
      * @return This builder.
      */
    public inc.stanby.schema.Address.Builder clearStation() {
      station = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Address build() {
      try {
        Address record = new Address();
        record.addressLevel = fieldSetFlags()[0] ? this.addressLevel : (java.lang.Integer) defaultValue(fields()[0]);
        record.cityCodes = fieldSetFlags()[1] ? this.cityCodes : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        if (coordinatePointBuilder != null) {
          record.coordinatePoint = this.coordinatePointBuilder.build();
        } else {
          record.coordinatePoint = fieldSetFlags()[2] ? this.coordinatePoint : (inc.stanby.schema.GeoLocation) defaultValue(fields()[2]);
        }
        record.distance = fieldSetFlags()[3] ? this.distance : (java.lang.Integer) defaultValue(fields()[3]);
        record.prefectureCode = fieldSetFlags()[4] ? this.prefectureCode : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.station = fieldSetFlags()[5] ? this.station : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Address>
    WRITER$ = (org.apache.avro.io.DatumWriter<Address>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Address>
    READER$ = (org.apache.avro.io.DatumReader<Address>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
