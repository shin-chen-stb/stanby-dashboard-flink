/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package inc.stanby.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Salary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1099538548205990354L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Salary\",\"namespace\":\"inc.stanby.schema\",\"fields\":[{\"name\":\"unit\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"min\",\"type\":\"int\",\"default\":0},{\"name\":\"max\",\"type\":\"int\",\"default\":0}],\"default\":null}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Salary> ENCODER =
      new BinaryMessageEncoder<Salary>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Salary> DECODER =
      new BinaryMessageDecoder<Salary>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Salary> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Salary> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Salary>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Salary to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Salary from a ByteBuffer. */
  public static Salary fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence unit;
  @Deprecated public int min;
  @Deprecated public int max;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Salary() {}

  /**
   * All-args constructor.
   * @param unit The new value for unit
   * @param min The new value for min
   * @param max The new value for max
   */
  public Salary(java.lang.CharSequence unit, java.lang.Integer min, java.lang.Integer max) {
    this.unit = unit;
    this.min = min;
    this.max = max;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return unit;
    case 1: return min;
    case 2: return max;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: unit = (java.lang.CharSequence)value$; break;
    case 1: min = (java.lang.Integer)value$; break;
    case 2: max = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'unit' field.
   * @return The value of the 'unit' field.
   */
  public java.lang.CharSequence getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * @param value the value to set.
   */
  public void setUnit(java.lang.CharSequence value) {
    this.unit = value;
  }

  /**
   * Gets the value of the 'min' field.
   * @return The value of the 'min' field.
   */
  public java.lang.Integer getMin() {
    return min;
  }

  /**
   * Sets the value of the 'min' field.
   * @param value the value to set.
   */
  public void setMin(java.lang.Integer value) {
    this.min = value;
  }

  /**
   * Gets the value of the 'max' field.
   * @return The value of the 'max' field.
   */
  public java.lang.Integer getMax() {
    return max;
  }

  /**
   * Sets the value of the 'max' field.
   * @param value the value to set.
   */
  public void setMax(java.lang.Integer value) {
    this.max = value;
  }

  /**
   * Creates a new Salary RecordBuilder.
   * @return A new Salary RecordBuilder
   */
  public static inc.stanby.schema.Salary.Builder newBuilder() {
    return new inc.stanby.schema.Salary.Builder();
  }

  /**
   * Creates a new Salary RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Salary RecordBuilder
   */
  public static inc.stanby.schema.Salary.Builder newBuilder(inc.stanby.schema.Salary.Builder other) {
    return new inc.stanby.schema.Salary.Builder(other);
  }

  /**
   * Creates a new Salary RecordBuilder by copying an existing Salary instance.
   * @param other The existing instance to copy.
   * @return A new Salary RecordBuilder
   */
  public static inc.stanby.schema.Salary.Builder newBuilder(inc.stanby.schema.Salary other) {
    return new inc.stanby.schema.Salary.Builder(other);
  }

  /**
   * RecordBuilder for Salary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Salary>
    implements org.apache.avro.data.RecordBuilder<Salary> {

    private java.lang.CharSequence unit;
    private int min;
    private int max;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(inc.stanby.schema.Salary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.unit)) {
        this.unit = data().deepCopy(fields()[0].schema(), other.unit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.min)) {
        this.min = data().deepCopy(fields()[1].schema(), other.min);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.max)) {
        this.max = data().deepCopy(fields()[2].schema(), other.max);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Salary instance
     * @param other The existing instance to copy.
     */
    private Builder(inc.stanby.schema.Salary other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.unit)) {
        this.unit = data().deepCopy(fields()[0].schema(), other.unit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.min)) {
        this.min = data().deepCopy(fields()[1].schema(), other.min);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.max)) {
        this.max = data().deepCopy(fields()[2].schema(), other.max);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'unit' field.
      * @return The value.
      */
    public java.lang.CharSequence getUnit() {
      return unit;
    }

    /**
      * Sets the value of the 'unit' field.
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public inc.stanby.schema.Salary.Builder setUnit(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.unit = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'unit' field.
      * @return This builder.
      */
    public inc.stanby.schema.Salary.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'min' field.
      * @return The value.
      */
    public java.lang.Integer getMin() {
      return min;
    }

    /**
      * Sets the value of the 'min' field.
      * @param value The value of 'min'.
      * @return This builder.
      */
    public inc.stanby.schema.Salary.Builder setMin(int value) {
      validate(fields()[1], value);
      this.min = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'min' field has been set.
      * @return True if the 'min' field has been set, false otherwise.
      */
    public boolean hasMin() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'min' field.
      * @return This builder.
      */
    public inc.stanby.schema.Salary.Builder clearMin() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'max' field.
      * @return The value.
      */
    public java.lang.Integer getMax() {
      return max;
    }

    /**
      * Sets the value of the 'max' field.
      * @param value The value of 'max'.
      * @return This builder.
      */
    public inc.stanby.schema.Salary.Builder setMax(int value) {
      validate(fields()[2], value);
      this.max = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'max' field has been set.
      * @return True if the 'max' field has been set, false otherwise.
      */
    public boolean hasMax() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'max' field.
      * @return This builder.
      */
    public inc.stanby.schema.Salary.Builder clearMax() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Salary build() {
      try {
        Salary record = new Salary();
        record.unit = fieldSetFlags()[0] ? this.unit : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.min = fieldSetFlags()[1] ? this.min : (java.lang.Integer) defaultValue(fields()[1]);
        record.max = fieldSetFlags()[2] ? this.max : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Salary>
    WRITER$ = (org.apache.avro.io.DatumWriter<Salary>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Salary>
    READER$ = (org.apache.avro.io.DatumReader<Salary>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
